{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location to for the resources."
      }
    },
    "vmName": {
      "type": "string",
      "defaultValue": "linux-vm",
      "metadata": {
        "description": "Name for the Virtual Machine."
      }
    },
    "adminUsername": {
      "defaultValue": "puppetadmin",
      "type": "string",
      "metadata": {
        "description": "User name for the Virtual Machine."
      }
    },
    "authenticationType": {
      "type": "string",
      "defaultValue": "password",
      "allowedValues": [
        "password",
        "sshPublicKey"
      ],
      "metadata": {
        "description": "Type of authentication to use on the Virtual Machine."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    },
    "sshPublicKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "ssh key for the Virtual Machine."
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D3_v2",
      "metadata": {
        "description": "Size for the Virtual Machine."
      }
    },
    "storageNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "metadata": {
        "description": "Determines whether or not a new storage account should be provisioned."
      }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[concat('storage', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the storage account"
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "Storage account type"
      }
    },
    "storageAccountResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Name of the resource group for the existing storage account"
      }
    },
    "virtualNetworkNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "metadata": {
        "description": "Determines whether or not a new virtual network should be provisioned."
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "defaultValue": "VirtualNetwork",
      "metadata": {
        "description": "Name of the virtual network"
      }
    },
    "addressPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "Address prefix of the virtual network"
      }
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "default",
      "metadata": {
        "description": "Name of the subnet"
      }
    },
    "subnetPrefix": {
      "type": "string",
      "defaultValue": "10.0.0.0/24",
      "metadata": {
        "description": "Subnet prefix of the virtual network"
      }
    },
    "virtualNetworkResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Name of the resource group for the existing virtual network"
      }
    },
    "publicIpNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "metadata": {
        "description": "Determines whether or not a new public ip should be provisioned."
      }
    },
    "publicIpName": {
      "type": "string",
      "defaultValue": "PublicIp",
      "metadata": {
        "description": "Name of the public ip address"
      }
    },
    "networkSecurityGroupNewOrExisting" :{
      "type": "string",
      "defaultValue": "new",      
      "metadata": {
        "description": "Name of the public ip address"
      }
    },
    "networkSecurityGroupResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Name of the resource group for the network security group"
      }
    },
    "networkSecurityGroupName": {
      "type": "string",
      "metadata": {
        "description": "Network Security Group for the nic"
      }
    },
    "publicIpDns": {
      "type": "string",
      "metadata": {
        "description": "DNS of the public ip address for the VM"
      }
    },
    "publicIpResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Name of the resource group for the public ip address"
      }
    }
  },
  "variables": {
    "fqdn": "[concat(parameters('publicIpDns'), '.', tolower(replace(parameters('location'), ' ', '')), '.cloudapp.azure.com')]",
    "nicName": "[concat(parameters('vmName'), '-nic')]",
    "passwordAuth": {
      "computerName": "[parameters('vmName')]",
      "adminUsername": "[parameters('adminUsername')]",
      "adminPassword": "[parameters('adminPassword')]"
    },
    "sshAuth": {
      "computerName": "[parameters('vmName')]",
      "adminUsername": "[parameters('adminUsername')]",
      "linuxConfiguration": {
        "disablePasswordAuthentication": true,
        "ssh": {
          "publicKeys": [
            {
              "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
              "keyData": "[parameters('sshPublicKey')]"
            }
          ]
        }
      }
    }
  },
  "resources": [
    {
      "condition": "[equals(parameters('storageNewOrExisting'), 'new')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2017-06-01",
      "name": "[parameters('storageAccountName')]",
      "location": "[parameters('location')]",
      "kind": "Storage",
      "sku": {
        "name": "[parameters('storageAccountType')]"
      }
    },
    {
      "condition": "[equals(parameters('publicIpNewOrExisting'), 'new')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2017-09-01",
      "name": "[parameters('publicIpName')]",
      "location": "[parameters('location')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[parameters('publicIpDns')]"
        }
      }
    },
    {
      "condition": "[equals(parameters('networkSecurityGroupNewOrExisting'), 'new')]",      
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "parameters('networkSecurityGroupName')",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "puppet",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "8140",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
	          "name": "ssh",
            "properties": {
              "description": "Allow SSH",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 201,
              "direction": "Inbound"
            }
          },
          {
            "name": "MCollective",
            "properties": {
              "description": "MCollective",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "61613",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 102,
              "direction": "Inbound"
            }
          },
          {
            "name": "https",
            "properties": {
              "description": "MCollective",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 103,
              "direction": "Inbound"
            }
          },
          {
            "name": "orchestrator",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "8142",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 104,
              "direction": "Inbound"
            }
          },
          {
            "name": "rbac",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "4433",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 105,
              "direction": "Inbound"
            }
          },
          {
            "name": "orchestratorpcp",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "8143",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 105,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "condition": "[equals(parameters('virtualNetworkNewOrExisting'), 'new')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2017-09-01",
      "name": "[parameters('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[parameters('networkSecurityGroupName')]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('subnetName')]",
            "properties": {
              "addressPrefix": "[parameters('subnetPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId(parameters('networkSecurityGroupResourceGroupName'),'Microsoft.Network/networkSecurityGroups/', parameters('networkSecurityGroupName'))]"
                }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2017-09-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[parameters('publicIpName')]",
        "[parameters('virtualNetworkName')]",
        "[parameters('networkSecurityGroupName')]"
      ],
      "properties": {
        "networkSecurityGroup" :{
          "id" : "[resourceId(parameters('networkSecurityGroupResourceGroupName'), 'Microsoft.Network/networkSecurityGroups/', parameters('networkSecurityGroupName'))]"
        },
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId(parameters('publicIpResourceGroupName'), 'Microsoft.Network/publicIPAddresses', parameters('publicIpName'))]"
              },
              "subnet": {
                "id": "[resourceId(parameters('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets/', parameters('virtualNetworkName'), parameters('subnetName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2017-03-30",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[parameters('vmName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[parameters('storageAccountName')]",
        "[variables('nicName')]"
      ],
      "plan": {
        "name": "2017-2",
        "product": "puppet-enterprise",
        "publisher": "puppet"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": "[if(equals(parameters('authenticationType'), 'password'), variables('passwordAuth'), variables('sshAuth'))]",
        "storageProfile": {
          "imageReference": {
            "publisher": "Puppet",
            "offer": "Puppet-Enterprise",
            "sku": "2017-2",
            "version": "latest"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[reference(resourceId(parameters('storageAccountResourceGroupName'), 'Microsoft.Storage/storageAccounts/', parameters('storageAccountName')), '2017-06-01').primaryEndpoints.blob]"
          }
        }
      }
      // },
    // {
    //     "type": "Microsoft.Compute/virtualMachines/extensions",
    //     "name": "[concat(parameters('vmName'),'/CustomScriptExtension')]",
    //     "apiVersion": "2017-03-30",
    //     "location": "[parameters('location')]",
    //     "dependsOn": [
    //         "[concat('Microsoft.Compute/virtualMachines/', parameters('vmName'))]",
    //         "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
    //     ],
    //     "properties": {
    //        "publisher": "Microsoft.OSTCExtensions",
    //        "type": "CustomScriptForLinux",
    //        "typeHandlerVersion": "1.3",
    //        "autoUpgradeMinorVersion" : "true",
    //        "settings": {
    //           "commandToExecute": "[concat('/opt/puppetlabs/azure/bin/init-pe.sh ', variables('fqdn'))]"
    //        }
    //    }
    // }
    }
  ]
}